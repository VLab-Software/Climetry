rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection - LIBERADO PARA HACKATHON
    match /users/{userId} {
      allow read, write: if isAuthenticated();
      
      // Subcoleção de atividades
      match /activities/{activityId} {
        allow read, write: if isAuthenticated();
      }
      
      // Subcoleção de amigos
      match /friends/{friendId} {
        allow read, write: if isAuthenticated();
      }
    }
    
    // Friend Requests collection
    match /friendRequests/{requestId} {
      // Qualquer autenticado pode criar solicitações
      allow create: if isAuthenticated();
      
      // Apenas destinatário ou remetente podem ler
      allow read: if isAuthenticated() && 
                     (request.auth.uid == resource.data.toUserId || 
                      request.auth.uid == resource.data.fromUserId);
      
      // Apenas destinatário pode atualizar (aceitar/rejeitar)
      allow update: if isAuthenticated() && 
                       request.auth.uid == resource.data.toUserId;
      
      // Apenas remetente pode deletar
      allow delete: if isAuthenticated() && 
                       request.auth.uid == resource.data.fromUserId;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Apenas o dono pode ler suas notificações
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.userId;
      
      // Sistema pode criar notificações para qualquer usuário
      allow create: if isAuthenticated();
      
      // Apenas o dono pode atualizar (marcar como lida)
      allow update: if isAuthenticated() && 
                       request.auth.uid == resource.data.userId;
      
      // Apenas o dono pode deletar
      allow delete: if isAuthenticated() && 
                       request.auth.uid == resource.data.userId;
    }
    
    // FCM Messages (para Cloud Functions)
    match /fcmMessages/{messageId} {
      // Apenas sistema pode criar
      allow create: if isAuthenticated();
      
      // Cloud Functions podem atualizar
      allow update: if true;
      
      // Ninguém pode ler (só Cloud Functions)
      allow read: if false;
    }
    
    // Desastres/Alertas (público)
    match /disasters/{disasterId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated();
    }
    
    // Activities (Eventos/Atividades) - TOTALMENTE LIBERADO PARA HACKATHON
    match /activities/{activityId} {
      allow read, write: if isAuthenticated();
    }
    
    // Event Invitations (para Cloud Functions)
    match /eventInvitations/{invitationId} {
      // Apenas sistema pode criar convites
      allow create: if isAuthenticated();
      
      // Cloud Functions podem atualizar (marcar como processado)
      allow update: if true;
      
      // Apenas o participante pode ler seu próprio convite
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.participantUserId;
    }
    
    // Activity Updates (para Cloud Functions)
    match /activityUpdates/{updateId} {
      // Apenas sistema pode criar atualizações
      allow create: if isAuthenticated();
      
      // Cloud Functions podem atualizar (marcar como processado)
      allow update: if true;
      
      // Apenas o participante pode ler sua própria atualização
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.participantUserId;
    }
  }
}
